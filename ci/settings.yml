---
meta:
  name:    keyval-resource
  release: Key-value Concourse resource
  target:  gk-plat-devs
  url:     https://ci.gstack.io

  initial_version: "1.1.0"

  git:
    email:  ((git-commit-email))
    name:   ((git-commit-name))

  image:
    name: harbor.ci.gstack.io/gstack/gk-ops
    registry:
      username: ((docker-registry-username))
      password: ((docker-registry-password))

  dockerhub:
    username:   ((docker-registry-username))
    password:   ((docker-registry-password))
    repository: (( concat "harbor.ci.gstack.io/gstack/" meta.name ))
    short_desc:
      A Concourse resource that passes key-value pairs between jobs

  aws:
    bucket:      (( grab meta.pipeline ))
    region_name: eu-west-3
    access_key:  ((aws-access-key))
    secret_key:  ((aws-secret-key))

  github:
    owner:        gstackio
    repo:         keyval-resource
    branch:       master
    private_key:  ((github-private-key))
    access_token: ((github-access-token))

  slack:
    webhook:       ((slack-webhook))
    username:      ((slack-username))
    icon:          ((slack-icon-url))
    channel:       "#oss-pipelines-notifications"
    test_fail_msg:  '(( concat ":concourse-fail: <" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Failed " meta.name " tests!  Click for details.>" ))'

jobs:
  - name: build
    plan:
      - (( inline ))
      - in_parallel:
          - (( append ))
          - { get: golang-alpine, trigger: true, params: { format: oci } }
          - { get: alpine-latest, trigger: true, params: { format: oci } }

      - task: build-docker-image
        config:
          inputs:
            - (( replace ))
            - name: git
            - name: golang-alpine
            - name: alpine-latest
        params:
          CONTEXT:          git
          IMAGE_ARG_golang: golang-alpine/image.tar
          IMAGE_ARG_alpine: alpine-latest/image.tar

  - name: promote
    plan:
      - (( inline ))
      - {} # in_parallel:
      - {} # task: release
      - {} # load_var: version
      - {} # put: latest
      - {} # put: version
      - {} # put: git
      - {} # put: github

      - task: update-dockerhub-readme
        params:
          DOCKERHUB_USERNAME:   ((dockerhub-username))
          DOCKERHUB_PASSWORD:   ((dockerhub-password))
          DOCKERHUB_REPOSITORY: (( concat "gstack/" meta.name ))

resources:

  - name: git
    check_every: 24h
    webhook_token: ((concourse-webhook-token))

  - name: git-pull-requests
    check_every: 24h
    webhook_token: ((concourse-webhook-token))

  - name: version
    icon: github
    source:
      bucket:            (( prune ))
      region_name:       (( prune ))
      key:               (( prune ))
      access_key_id:     (( prune ))
      secret_access_key: (( prune ))
      driver:      git
      uri:         git@github.com:gstackio/gk-pipelines-compass.git
      branch:      master
      file:        (( concat "versions/" meta.pipeline ))
      private_key: ((github-private-key))
      git_user:    "((git-commit-name)) <((git-commit-email))>"

  - name: golang-alpine
    type: registry-image
    icon: docker
    source:
      repository: golang
      tag:        alpine

  - name: alpine-latest
    type: registry-image
    icon: docker
    source:
      repository: alpine
      tag:        latest
